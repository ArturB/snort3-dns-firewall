cmake_minimum_required ( VERSION 3.4.3 )

project( snort_extra CXX C )
set (EXTRA_VERSION_MAJOR 1)
set (EXTRA_VERSION_MINOR 0)
set (EXTRA_VERSION_PATCH 0)
set (EXTRA_VERSION "${EXTRA_VERSION_MAJOR}.${EXTRA_VERSION_MINOR}.${EXTRA_VERSION_PATCH}")

set (CMAKE_CXX_STANDARD 11)
set (CMAKE_CXX_STANDARD_REQUIRED ON)

# Debug and release build
include(CheckCXXCompilerFlag)

option ( ENABLE_DEBUG "Enable debugging options (bugreports and developers only)" OFF )
option ( ENABLE_RELEASE "Enable gdb debugging information" ON )

if ( ENABLE_DEBUG )
    string ( APPEND CMAKE_CXX_FLAGS " -g -DDEBUG" )
else ()
    string ( APPEND CMAKE_CXX_FLAGS " -DNDEBUG" )
endif ( ENABLE_DEBUG )

if ( ENABLE_RELEASE )
    string ( APPEND CMAKE_CXX_FLAGS " -O3" )
endif ( ENABLE_RELEASE )

# src dir
add_subdirectory ( src )

# Output dirs
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# CPack configuration
set (CPACK_GENERATOR TGZ)
set (CPACK_PACKAGE_NAME "dns-firewall")
set (CPACK_PACKAGE_VENDOR "Artur M. Brodzki")
set (CPACK_PACKAGE_VERSION_MAJOR "${EXTRA_VERSION_MAJOR}")
set (CPACK_PACKAGE_VERSION_MINOR "${EXTRA_VERSION_MINOR}")
set (CPACK_PACKAGE_VERSION_PATCH "${EXTRA_VERSION_PATCH}")
set (CPACK_PACKAGE_INSTALL_DIRECTORY "dist")
set (CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
set (CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
set (CPACK_SOURCE_IGNORE_FILES "${CMAKE_BINARY_DIR}/*")
set (CPACK_SOURCE_GENERATOR TGZ)
include(CPack)

# Print configuration flags
message("
-------------------------------------------------------
${CMAKE_PROJECT_NAME} version ${EXTRA_VERSION}

Install options:
    prefix:    ${CMAKE_INSTALL_PREFIX}
    ARCH_OUT:  ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}
    LIBR_OUT:  ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
    RUNT_OUT:  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}

Compiler options:
    CXX:            ${CMAKE_CXX_COMPILER}
    CXXFLAGS:       ${CMAKE_CXX_FLAGS}
")
